name: AppExchange CI/CD

on:
  push:
    branches: [develop, main, "release/*"]
  pull_request:
    branches: [develop, main, "release/*"]
  workflow_dispatch:

env:
  NODE_VERSION: "18"

jobs:
  # 0. Validation préalable (sans environnement Salesforce)
  validation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm ci
      - name: Validation du code
        run: |
          echo "Validation de la syntaxe et structure..."
          npm run lint
          npm run test:unit:coverage
          npm run prettier:verify

  # 1. Integration Testing in Dedicated Sandbox (feature/develop branches)
  integration:
    environment: integration
    if: github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/feature/')
    runs-on: ubuntu-latest
    needs: validation
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm ci
      - run: npm run lint
      - run: npm run test:unit:coverage
      - run: npm run prettier:verify
      - name: Install Salesforce CLI
        run: npm install -g @salesforce/cli
      - name: Authenticate to Integration Sandbox
        run: |
          printf "%s" "${{ secrets.SF_JWT_KEY_FILE }}" > jwt.key
          sf org login jwt --client-id ${{ secrets.SF_CONNECTED_APP_CONSUMER_KEY }} --jwt-key-file jwt.key --username ${{ secrets.SF_INT_USERNAME }} --instance-url ${{ secrets.SF_INT_INSTANCE_URL }} --alias int-sandbox
      - name: Validation complète avec org cible
        run: |
          echo "🔍 Validation complète contre l'org d'intégration..."
          sf project deploy validate --source-dir force-app --target-org int-sandbox
          echo "✅ Validation complète réussie"

      - name: Deploy & Test in Integration Sandbox
        run: |
          sf project deploy start --source-dir force-app --target-org int-sandbox
          sf apex run test --test-level RunLocalTests --target-org int-sandbox --wait 10
      - run: rm -f jwt.key

  # 2. UAT in Sandbox (release/* branch)
  uat:
    environment: uat
    if: startsWith(github.ref, 'refs/heads/release/')
    runs-on: ubuntu-latest
    needs: [validation, integration]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm ci
      - name: Install Salesforce CLI
        run: npm install -g @salesforce/cli
      - name: Authenticate to UAT Sandbox
        run: |
          printf "%s" "${{ secrets.SF_JWT_KEY_FILE }}" > jwt.key
          sf org login jwt --client-id ${{ secrets.SF_CONNECTED_APP_CONSUMER_KEY }} --jwt-key-file jwt.key --username ${{ secrets.SF_UAT_USERNAME }} --instance-url ${{ secrets.SF_UAT_INSTANCE_URL }} --alias uat-org
      - name: Validation complète avec org UAT
        run: |
          echo "🔍 Validation complète contre l'org UAT..."
          sf project deploy validate --source-dir force-app --target-org uat-org
          echo "✅ Validation complète réussie"

      - name: Deploy & Test in UAT Sandbox
        run: |
          sf project deploy start --source-dir force-app --target-org uat-org
          sf apex run test --test-level RunLocalTests --target-org uat-org --wait 10
      - run: rm -f jwt.key

  # 3. Package Creation in Packaging Env Hub DE Org (main branch, manual trigger)
  package:
    environment: package
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: [validation, uat]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - run: npm ci
      - name: Install Salesforce CLI
        run: npm install -g @salesforce/cli
      - name: Authenticate to Packaging DE Org
        run: |
          printf "%s" "${{ secrets.SF_JWT_KEY_FILE }}" > jwt.key
          sf org login jwt --client-id ${{ secrets.SF_CONNECTED_APP_CONSUMER_KEY }} --jwt-key-file jwt.key --username ${{ secrets.SF_PKG_USERNAME }} --instance-url ${{ secrets.SF_PKG_INSTANCE_URL }} --alias pkg-org
      - name: Create Package Version
        run: |
          sf package version create --package "YourPackageName" --installation-key-bypass --wait 20 --target-org pkg-org
      - run: rm -f jwt.key

  # 4. Subscriber Org Install/Upgrade Test (manual trigger)
  subscriber-test:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    needs: [validation, package]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install Salesforce CLI
        run: npm install -g @salesforce/cli
      - name: Authenticate to Subscriber Org
        run: |
          printf "%s" "${{ secrets.SF_JWT_KEY_FILE }}" > jwt.key
          sf org login jwt --client-id ${{ secrets.SF_CONNECTED_APP_CONSUMER_KEY }} --jwt-key-file jwt.key --username ${{ secrets.SF_SUB_USERNAME }} --instance-url ${{ secrets.SF_SUB_INSTANCE_URL }} --alias sub-org
      - name: Install/Upgrade Package
        run: |
          sf package install --package <packageVersionId> --target-org sub-org --wait 20
      - run: rm -f jwt.key
